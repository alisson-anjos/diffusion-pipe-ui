// <auto-generated />
using DiffusionPipeInterface.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DiffusionPipeInterface.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250307083151_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.2");

            modelBuilder.Entity("DiffusionPipeInterface.Models.AdapterConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Dtype")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Rank")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AdapterConfigurations");
                });

            modelBuilder.Entity("DiffusionPipeInterface.Models.DatasetConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ARBucketsJson")
                        .HasColumnType("TEXT")
                        .HasColumnName("ARBuckets");

                    b.Property<bool>("EnableARBucket")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FrameBucketsJson")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("FrameBuckets");

                    b.Property<float>("MaxAR")
                        .HasColumnType("REAL");

                    b.Property<float>("MinAR")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("NumARBuckets")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumRepeats")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ResolutionsJson")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Resolutions");

                    b.HasKey("Id");

                    b.ToTable("DatasetConfigurations");
                });

            modelBuilder.Entity("DiffusionPipeInterface.Models.DatasetDirectoryConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ARBucketsJson")
                        .HasColumnType("TEXT")
                        .HasColumnName("ARBuckets");

                    b.Property<int>("DatasetConfigurationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FrameBucketsJson")
                        .HasColumnType("TEXT")
                        .HasColumnName("FrameBuckets");

                    b.Property<string>("MaskPath")
                        .HasColumnType("TEXT");

                    b.Property<int>("NumRepeats")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ResolutionsJson")
                        .HasColumnType("TEXT")
                        .HasColumnName("Resolutions");

                    b.HasKey("Id");

                    b.HasIndex("DatasetConfigurationId");

                    b.ToTable("DirectoryConfigurations");
                });

            modelBuilder.Entity("DiffusionPipeInterface.Models.ModelConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CheckpointPath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ClipPath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DiffusersPath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Dtype")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LlmPath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ModelType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("TEXT");

                    b.Property<string>("TextEncoderPath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TimestepSampleMethod")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TransformerDType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TransformerPath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<string>("VaePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ModelConfigurations");

                    b.HasDiscriminator<string>("ModelType").HasValue("ModelConfiguration");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("DiffusionPipeInterface.Models.OptimizerConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BetasJson")
                        .HasColumnType("TEXT")
                        .HasColumnName("Betas");

                    b.Property<double>("Eps")
                        .HasColumnType("REAL");

                    b.Property<double>("Lr")
                        .HasColumnType("REAL");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<double>("WeightDecay")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("OptimizerConfigurations");
                });

            modelBuilder.Entity("DiffusionPipeInterface.Models.TrainConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ActivationCheckpointing")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CachingBatchSize")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CheckpointEveryNMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DatasetConfig")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Epochs")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EvalBeforeFirstSteps")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EvalEveryNEpochs")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EvalGradientAccumulationSteps")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EvalMicroBatchSizePerGPU")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GradientAccumulationSteps")
                        .HasColumnType("INTEGER");

                    b.Property<float>("GradientClipping")
                        .HasColumnType("REAL");

                    b.Property<int>("MicroBatchSizePerGPU")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OutputDir")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PartitionMethod")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PipelineStages")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SaveDType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SaveEveryNEpochs")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StepsPerPrint")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VideoClipMode")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WarmupSteps")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("TrainConfigurations");
                });

            modelBuilder.Entity("DiffusionPipeInterface.Models.Models.ChromaModelConfiguration", b =>
                {
                    b.HasBaseType("DiffusionPipeInterface.Models.ModelConfiguration");

                    b.Property<bool>("FluxShift")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("chroma");
                });

            modelBuilder.Entity("DiffusionPipeInterface.Models.Models.CosmosModelConfiguration", b =>
                {
                    b.HasBaseType("DiffusionPipeInterface.Models.ModelConfiguration");

                    b.HasDiscriminator().HasValue("cosmos");
                });

            modelBuilder.Entity("DiffusionPipeInterface.Models.Models.FluxModelConfiguration", b =>
                {
                    b.HasBaseType("DiffusionPipeInterface.Models.ModelConfiguration");

                    b.Property<bool>("BypassGuidanceEmbedding")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("FluxShift")
                        .HasColumnType("INTEGER");

                    b.ToTable("ModelConfigurations", t =>
                        {
                            t.Property("FluxShift")
                                .HasColumnName("FluxModelConfiguration_FluxShift");
                        });

                    b.HasDiscriminator().HasValue("flux");
                });

            modelBuilder.Entity("DiffusionPipeInterface.Models.Models.HunyuanModelConfiguration", b =>
                {
                    b.HasBaseType("DiffusionPipeInterface.Models.ModelConfiguration");

                    b.Property<string>("CkptPath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("hunyuan-video");
                });

            modelBuilder.Entity("DiffusionPipeInterface.Models.Models.LtxModelConfiguration", b =>
                {
                    b.HasBaseType("DiffusionPipeInterface.Models.ModelConfiguration");

                    b.Property<string>("SingleFilePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("ltx-video");
                });

            modelBuilder.Entity("DiffusionPipeInterface.Models.Models.LuminaModelConfiguration", b =>
                {
                    b.HasBaseType("DiffusionPipeInterface.Models.ModelConfiguration");

                    b.Property<bool>("LuminaShift")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("lumina_2");
                });

            modelBuilder.Entity("DiffusionPipeInterface.Models.Models.SdxlModelConfiguration", b =>
                {
                    b.HasBaseType("DiffusionPipeInterface.Models.ModelConfiguration");

                    b.Property<bool>("DebiasedEstimationLoss")
                        .HasColumnType("INTEGER");

                    b.Property<float>("MinSnrGamma")
                        .HasColumnType("REAL");

                    b.Property<float>("TextEncoder1Lr")
                        .HasColumnType("REAL");

                    b.Property<float>("TextEncoder2Lr")
                        .HasColumnType("REAL");

                    b.Property<float>("UnetLr")
                        .HasColumnType("REAL");

                    b.Property<bool>("VPred")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("sdxl");
                });

            modelBuilder.Entity("DiffusionPipeInterface.Models.Models.WanModelConfiguration", b =>
                {
                    b.HasBaseType("DiffusionPipeInterface.Models.ModelConfiguration");

                    b.HasDiscriminator().HasValue("wan");
                });

            modelBuilder.Entity("DiffusionPipeInterface.Models.DatasetDirectoryConfiguration", b =>
                {
                    b.HasOne("DiffusionPipeInterface.Models.DatasetConfiguration", "DatasetConfiguration")
                        .WithMany("Directories")
                        .HasForeignKey("DatasetConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DatasetConfiguration");
                });

            modelBuilder.Entity("DiffusionPipeInterface.Models.TrainConfiguration", b =>
                {
                    b.HasOne("DiffusionPipeInterface.Models.AdapterConfiguration", "AdapterConfiguration")
                        .WithOne()
                        .HasForeignKey("DiffusionPipeInterface.Models.TrainConfiguration", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiffusionPipeInterface.Models.ModelConfiguration", "ModelConfiguration")
                        .WithOne()
                        .HasForeignKey("DiffusionPipeInterface.Models.TrainConfiguration", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiffusionPipeInterface.Models.OptimizerConfiguration", "OptimizerConfiguration")
                        .WithOne()
                        .HasForeignKey("DiffusionPipeInterface.Models.TrainConfiguration", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdapterConfiguration");

                    b.Navigation("ModelConfiguration");

                    b.Navigation("OptimizerConfiguration");
                });

            modelBuilder.Entity("DiffusionPipeInterface.Models.DatasetConfiguration", b =>
                {
                    b.Navigation("Directories");
                });
#pragma warning restore 612, 618
        }
    }
}
