@using System.IO
@using System.Net.Http.Json
@using DiffusionPipeInterface.ViewModels
@using MudBlazor
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<MudCard Outlined="true" Elevation="3" Class="my-2">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">@Title</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudIconButton Icon="@Icons.Material.Outlined.Refresh" OnClick="() => Refresh()" Color="Color.Default" />
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent>
        <MudTreeView T="FileItem"
        Hover
        SelectionMode="SelectionMode.MultiSelection"
        TriState="false"
        Color="Color.Tertiary"
        MaxHeight="500px">
            @foreach (var item in FileStructure)
            {
                <MudTreeViewItem Text="@item.Name"
                Value="@item"
                @bind-Expanded="@item.IsExpanded"
                Icon="@item.Icon"
                IconExpanded="@item.IconExpanded">
                    @if (item.IsDirectory)
                    {
                        @foreach (var subItem in item.Children)
                        {
                            <MudTreeViewItem Text="@subItem.Name"
                            Value="@subItem"
                            @bind-Selected="@subItem.IsSelected"
                            Icon="@subItem.Icon">

                                @if (subItem.IsDirectory)
                        {
                            @foreach (var subSubItem in subItem.Children)
                            {
                                <MudTreeViewItem Text="@subSubItem.Name"
                                Value="@subSubItem"
                                @bind-Selected="@subSubItem.IsSelected"
                                Ex
                                Icon="@subSubItem.Icon" />

                                @if (subSubItem.IsDirectory)
                                {
                                    @foreach (var subsubSubItem in subSubItem.Children)
                                    {
                                        <MudTreeViewItem Text="@subsubSubItem.Name"
                                        Value="@subsubSubItem"
                                        @bind-Selected="@subsubSubItem.IsSelected"
                                        Icon="@subsubSubItem.Icon" />
                                    }
                                }
                            }
                        }
                    </MudTreeViewItem>
                        }
                    }
                </MudTreeViewItem>
            }
        </MudTreeView>
    </MudCardContent>
    <MudCardActions>
        <MudButton Variant="Variant.Outlined" Color="Color.Primary" FullWidth="true" OnClick="DownloadSelected">Download selected files (.zip)</MudButton>
    </MudCardActions>
</MudCard>


@if (IsLoading)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}

@code {

    [Parameter]
    [EditorRequired]
    public string DirectoryPath { get; set; } = string.Empty;

    [Parameter]
    public string Title { get; set; } = string.Empty;

    private bool IsLoading { get; set; } = false;

    private List<FileItem> FileStructure = new List<FileItem>();

    protected override void OnInitialized()
    {
        if (!string.IsNullOrEmpty(DirectoryPath))
        {
            LoadFileStructure(DirectoryPath);
        }
    }

    public void LoadFileStructure(string path)
    {
        if (Directory.Exists(path))
        {
            var directoryInfo = new DirectoryInfo(path);
            FileStructure = LoadDirectory(directoryInfo);
            StateHasChanged();
        }
    }

    public void Refresh()
    {
        if (Directory.Exists(DirectoryPath))
        {
            var directoryInfo = new DirectoryInfo(DirectoryPath);
            FileStructure = LoadDirectory(directoryInfo);
            StateHasChanged();
        }
    }

    private List<FileItem> LoadDirectory(DirectoryInfo directoryInfo)
    {
        var items = new List<FileItem>();

        foreach (var dir in directoryInfo.GetDirectories())
        {
            var directoryItem = new FileItem
                {
                    Name = dir.Name,
                    IsDirectory = true,
                    Icon = Icons.Material.Outlined.Folder,
                    IconExpanded = Icons.Material.Outlined.FolderOpen,
                    FullPath = dir.FullName,
                    Children = LoadDirectory(dir)
                };
            items.Add(directoryItem);
        }

        foreach (var file in directoryInfo.GetFiles())
        {
            var fileItem = new FileItem
                {
                    Name = file.Name,
                    IsDirectory = false,
                    Icon = Icons.Material.Outlined.Description,
                    FullPath = file.FullName
                };
            items.Add(fileItem);
        }

        return items;
    }


    private IEnumerable<FileItem> Flatten(FileItem item)
    {
        yield return item;
        if (item.IsDirectory && item.Children != null)
        {
            foreach (var child in item.Children.SelectMany(Flatten))
            {
                yield return child;
            }
        }
    }


    private async Task DownloadSelected()
    {
        IsLoading = true;
        StateHasChanged();
        try
        {
            var selectedFiles = FileStructure
                .SelectMany(item => Flatten(item))
                .Where(file => !file.IsDirectory && file.IsSelected)
                .Select(file => file.FullPath)
                .ToList();

            if (!selectedFiles.Any())
            {
                return;
            }

            var downloadRequest = new DownloadRequest
                {
                    SelectedFiles = selectedFiles,
                    BaseDirectory = DirectoryPath 
                };

            var prepareResponse = await Http.PostAsJsonAsync("/prepare-download", downloadRequest);
            if (prepareResponse.IsSuccessStatusCode)
            {
                var tempZipPath = await prepareResponse.Content.ReadFromJsonAsync<string>();
                if (!string.IsNullOrEmpty(tempZipPath))
                {
                    var downloadUrl = $"/download-zip?file={Uri.EscapeDataString(tempZipPath)}";
                    NavigationManager.NavigateTo(downloadUrl, forceLoad: true);
                }
            }
            else
            {
            }
        }
        finally
        {
            IsLoading = false;
        }

        StateHasChanged();
    }

    public class FileItem
    {
        public string Name { get; set; } = string.Empty;
        public bool IsDirectory { get; set; }
        public bool IsExpanded { get; set; }
        public bool IsSelected { get; set; }
        public string Icon { get; set; } = string.Empty;
        public string IconExpanded { get; set; } = string.Empty;
        public List<FileItem> Children { get; set; } = new List<FileItem>();
        public string FullPath { get; set; } = string.Empty;
    }
}
