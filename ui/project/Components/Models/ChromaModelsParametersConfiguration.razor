@using DiffusionPipeInterface.Models
@using DiffusionPipeInterface.Utils
@using DiffusionPipeInterface.ViewModels.Models
@using Enums
@using Microsoft.Extensions.Options
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime
@inject IConfiguration Configuration
@inject IOptionsMonitor<AppSettingsConfiguration> AppSettingsConfiguration

<MudTextField @bind-Value="ModelConfiguration.DiffusersPath" Required Label="Diffusers Path" Disabled="Locked" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Link" OnAdornmentClick=@(() => RedirectToLink("https://huggingface.co/lodestones/Chroma/tree/main"))></MudTextField>

<MudSelect T="Dtype" @bind-Value="ModelConfiguration.Dtype" Required Label="Dtype" FullWidth="true" Disabled="Locked" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Info" OnAdornmentClick=@(() => OpenDialogAsync(Tooltips.ModelDtype))>
    @foreach (Dtype item in Enum.GetValues(typeof(Dtype)))
    {
        <MudSelectItem Value="@item">@item</MudSelectItem>
    }
</MudSelect>

<MudTextField @bind-Value="ModelConfiguration.TransformerPath" Required Label="Transformer Path" Disabled="Locked" Variant="Variant.Outlined"></MudTextField>

<MudSelect T="Dtype?" @bind-Value="ModelConfiguration.TransformerDType" Required Label="Transformer Dtype" FullWidth="true" Disabled="Locked" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Info" OnAdornmentClick=@(() => OpenDialogAsync(Tooltips.TransformerDtype))>
    @foreach (Dtype? item in Enum.GetValues(typeof(Dtype)))
    {
        <MudSelectItem Value="@item">@item</MudSelectItem>
    }
</MudSelect>

<MudSwitch @bind-Value="ModelConfiguration.FluxShift" Color="Color.Primary" Disabled="Locked" Label="Enable Flux Shift" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Link" OnAdornmentClick=@(() => OpenDialogAsync(Tooltips.FluxShift)) />

@code {
    [Parameter]
    [EditorRequired]
    public ChromaModelConfigurationViewModel ModelConfiguration { get; set; } = null!;

    [Parameter]
    public bool Locked { get; set; } = false;

    private AppSettingsConfiguration configuration = null!;

    protected override void OnInitialized()
    {
        configuration = AppSettingsConfiguration.CurrentValue;

        if (ModelConfiguration != null && configuration.Models?.Chroma != null)
        {
            ModelConfiguration.DiffusersPath = string.IsNullOrEmpty(ModelConfiguration.DiffusersPath) ? configuration.Models.Chroma.DiffusersPath?.Replace("{ModelsPath}", configuration.ModelsPath) : ModelConfiguration.DiffusersPath;
            ModelConfiguration.TransformerPath = string.IsNullOrEmpty(ModelConfiguration.TransformerPath) ? configuration.Models.Chroma.TransformerPath?.Replace("{ModelsPath}", configuration.ModelsPath) : ModelConfiguration.TransformerPath;
        }
    }

    private Task OpenDialogAsync(string message)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Large };

        var parameters = new DialogParameters<InfoDialog>
        {
            { x => x.Message, message }
        };

        return DialogService.ShowAsync<InfoDialog>("Info", parameters, options);
    }

    private void RedirectToLink(string link)
    {
        JSRuntime.InvokeVoidAsync("openNewTab", link);
    }
}